code_algorithmic_thinking:
  _db_id: 43
  description: Approach coding/programming problems algorithmically.
code_assert_statements:
  _db_id: 58
  description: Check assumptions about the programs flow of control using assertions(Control
    flow invariants).
code_basic_calculation:
  _db_id: 57
  description: Perform basic algebraic calculations using code.
code_code_documentation:
  _db_id: 48
  description: Identify when and how to document/comment code.
code_control_flow:
  _db_id: 46
  description: Demonstrate basic programming flow control mechanisms. For example
    functions, loops and if statements
code_error_messages:
  _db_id: 59
  description: Choose useful error messages so that failing code can be corrected
    easily.
code_existing_code_update:
  _db_id: 49
  description: Update existing code according to new specifications.
code_naming_convention:
  _db_id: 47
  description: Naming conventions introduced and enforced
code_oop_class_instantiation:
  _db_id: 38
  description: Instantiating several distinct instances of multiple classes.
code_oop_composition:
  _db_id: 42
  description: Demonstrate composition by having one class instance keep track of
    other class instances
code_oop_encapsulation:
  _db_id: 40
  description: Demonstrate encapsulation - Understand the basic idea of a class as
    a collection of attributes and functions.
code_oop_inheritance:
  _db_id: 41
  description: Demonstrate inheritance with a 2 level inheritance hierarchy.
code_oop_polymorphism:
  _db_id: 39
  description: Demonstrated polymorphism by overriding a function and making use of
    superclass methods.
code_problem_decomposition:
  _db_id: 45
  description: Break programming problems down to isolated pieces and assemble a working
    solution.
code_pseudo_code:
  _db_id: 44
  description: Translate pseudo code to actual code.
code_tdd:
  _db_id: 51
  description: Implement TDD when being guided through the process step by step.
code_validation:
  _db_id: 50
  description: Validate input data.
data_sci_classification:
  _db_id: 19
  description: Understand the nature of classification problems and how to solve them
    using supervised learning techniques.
data_sci_classification_feature_selection:
  _db_id: 22
  description: Justify feature selection and determine most important features.
data_sci_classification_metrics:
  _db_id: 20
  description: "Evaluate model performance and discuss classification metrics within\
    \ the context of the given problem, correctly reporting metrics isn\u2019t sufficient.\
    \ Learners should be able to relate these to the actual problem being modelled."
data_sci_cluster_metrics:
  _db_id: 29
  description: Discuss how successful clustering was by referring to appropriate metrics
    (e.g. silhouette, adjusted rand index, etc.) or graphs.
data_sci_cluster_optimisation:
  _db_id: 28
  description: Understand how to use the elbow or silhouette method to find the optimal
    number of clusters.
data_sci_confusion_matrix_classification_report:
  _db_id: 25
  description: Correctly interpret the results of a confusion matrix and a classification
    report.
data_sci_cross_validation:
  _db_id: 1
  description: Understand the benefits of cross-validation on the quality of the model.
data_sci_data_processing:
  _db_id: 9
  description: Use pandas for data manipulation by extracting, filtering, and transforming
    data in DataFrames.
data_sci_data_validation:
  _db_id: 10
  description: Perform basic data validation and quality control.
data_sci_decision_trees:
  _db_id: 24
  description: Use tree based methods for classification problems.
data_sci_eda:
  _db_id: 2
  description: Perform exploratory data analysis on a dataset by creating appropriate
    graphs and interpreting descriptive statistics of the variables.
data_sci_graphs_based_on_data_type:
  _db_id: 13
  description: Identify appropriate graphs based on data type (continuous vs categorical).
data_sci_handle_categorical_variables:
  _db_id: 3
  description: Understand how to handle categorical data, the potential multicollinearity
    this raises, and how this affects the modelling process.
data_sci_hyper_parameter_tuning:
  _db_id: 21
  description: Optimise a classification model using hyper-parameter tuning.
data_sci_justify_feature_selection:
  _db_id: 4
  description: Justify their feature selection using metrics such as Pearson's correlation
    coefficients and their related p-values.
data_sci_k_means:
  _db_id: 27
  description: Correctly apply K-Means clustering to a given problem, identifying
    attributes results in similar groupings.
data_sci_linear_model_evaluation:
  _db_id: 5
  description: Evaluate the quality of a model by assessing metrics such as the Mean
    Absolute Error (MAE), Root Mean Square Error (RMSE) and R-squared values.
data_sci_linear_model_metrics:
  _db_id: 6
  description: Understand basic statistical metrics such as; variance explained by
    the model, significance values, confidence intervals.
data_sci_linear_model_overfitting:
  _db_id: 8
  description: Evaluate model overfitting using the RMSE criterion.
data_sci_linear_model_summary:
  _db_id: 7
  description: Interpret the standard summary of a linear regression model; for example
    what the unstandardised coefficient tells us about the relationship between variables.
data_sci_nlp:
  _db_id: 30
  description: Understand the nature and purpose of Natural Language Processing (NLP)
    techniques, and apply them to a given corpus.
data_sci_nlp_data_preparation:
  _db_id: 31
  description: Prepare a data set for NLP by building a basic NLP analysis pipeline.
data_sci_nlp_frequency_analysis:
  _db_id: 32
  description: Perform frequency analysis, compare complexity scores, and create appropriate
    visualisations such as word clouds to gain insights about a text.
data_sci_oop:
  _db_id: 16
  description: Apply OOP techniques of encapsulation, inheritance, and polymorphism
    within the context of data science.
data_sci_oop_diagnostic_class:
  _db_id: 18
  description: Create a class that will produce diagnostic plots for any given regression
    model.
data_sci_oop_metrics_class:
  _db_id: 17
  description: Create a class with methods to compute model metrics; residuals, standardised
    residuals, Mean Squared Error (MSE) and Root Mean Squared Error (RMSE).
data_sci_pandas:
  _db_id: 11
  description: Apply summary functions, maps, and grouping to aggregate data based
    on conditional statements.
data_sci_seaborn:
  _db_id: 14
  description: Create and interpret statistical graphs using seaborn.
data_sci_sensitivity_specificity:
  _db_id: 23
  description: Reason about sensitivity and specificity, with the aid of the Receiver
    Operating Characteristic (ROC) curve and metrics such as precision, recall, and
    the F1-score.
data_sci_sentiment_analysis:
  _db_id: 33
  description: Use TextBlob to perform sentiment analysis, describing the subjectivity
    and polarity/objectivity within a text.
data_sci_unsupervised_learning:
  _db_id: 26
  description: Understand what unsupervised learning techniques are and their role
    within the data science methodology.
data_sci_visual_eda:
  _db_id: 15
  description: Use graphs to reason about relationships between variables, and support
    insights gained from exploratory analysis.
data_sci_visualisations:
  _db_id: 12
  description: To combine, merge, and aggregate data to create visualisations.
git_create_a_repository:
  _db_id: 52
  description: Set up and create a repository on GitHub.
git_create_branches:
  _db_id: 54
  description: Create branches and switch between them.
git_make_commits:
  _db_id: 53
  description: Make commits to a repository.
git_merge_branches:
  _db_id: 56
  description: Merge branches and overcome merge conflicts.
git_use_gitignore:
  _db_id: 55
  description: Use gitignore files.
sql_docker_composition:
  _db_id: 60
  description: Use Postgres within a docker composition.
sql_many_to_many_relation:
  _db_id: 63
  description: Create sql tables that demonstrate a many-to-many relationship.
sql_one_to_many_relationship:
  _db_id: 62
  description: Create sql tables that demonstrate a one-to-many relationship.
sql_one_to_one_relationship:
  _db_id: 61
  description: Create sql tables that demonstrate a one-to-one relationship.
sql_query_data_with_group_by:
  _db_id: 65
  description: Query data using group by clause
sql_query_data_with_join:
  _db_id: 64
  description: Query data using simple select statements with conditionals, joins(left,
    right, inner, outer).
web_dev_hosting:
  _db_id: 34
  description: Host a basic web page to the using GitHub.
web_dev_responsive_page_design:
  _db_id: 35
  description: Design responsive web pages that accommodate for different types of
    devices.
web_dev_web_design_principals:
  _db_id: 37
  description: Implement simple web design principles that focus on UI, simple navigation,
    using adaptive formatting and keeping all visuals consistent and appealing.
web_dev_web_page_structure:
  _db_id: 36
  description: Describe the structure of a web page using Hyper Text Markup Language
    (HTML) and build a grid layout system using CSS Grid.
